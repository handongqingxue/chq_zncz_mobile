{"ast":null,"code":"import \"antd-mobile/es/date-picker/style\";\nimport _DatePicker from \"antd-mobile/es/date-picker\";\nimport \"antd-mobile/es/list/style\";\nimport _List from \"antd-mobile/es/list\";\nimport \"antd-mobile/es/textarea-item/style\";\nimport _TextareaItem from \"antd-mobile/es/textarea-item\";\nimport \"antd-mobile/es/input-item/style\";\nimport _InputItem from \"antd-mobile/es/input-item\";\nimport \"antd-mobile/es/badge/style\";\nimport _Badge from \"antd-mobile/es/badge\";\nimport _classCallCheck from \"E:\\\\\\u6211\\u7684\\u6587\\u4EF6\\\\\\u4EBA\\u5458\\u5B9A\\u4F4D\\u7CFB\\u7EDF\\\\chq_position_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\\\u6211\\u7684\\u6587\\u4EF6\\\\\\u4EBA\\u5458\\u5B9A\\u4F4D\\u7CFB\\u7EDF\\\\chq_position_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\\\u6211\\u7684\\u6587\\u4EF6\\\\\\u4EBA\\u5458\\u5B9A\\u4F4D\\u7CFB\\u7EDF\\\\chq_position_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\\\u6211\\u7684\\u6587\\u4EF6\\\\\\u4EBA\\u5458\\u5B9A\\u4F4D\\u7CFB\\u7EDF\\\\chq_position_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\\\u6211\\u7684\\u6587\\u4EF6\\\\\\u4EBA\\u5458\\u5B9A\\u4F4D\\u7CFB\\u7EDF\\\\chq_position_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"E:\\\\\\u6211\\u7684\\u6587\\u4EF6\\\\\\u4EBA\\u5458\\u5B9A\\u4F4D\\u7CFB\\u7EDF\\\\chq_position_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"E:\\\\\\u6211\\u7684\\u6587\\u4EF6\\\\\\u4EBA\\u5458\\u5B9A\\u4F4D\\u7CFB\\u7EDF\\\\chq_position_app\\\\src\\\\components\\\\FormCard\\\\index.js\";\nimport React, { Component } from 'react';\nimport ImgBox from './../ImgBox';\nimport SelectPicker from './../SelectPicker';\nimport CasePicker from './../CasePicker';\nimport MultiplePicker from './../MultiplePicker';\n\nvar FormCard = /*#__PURE__*/function (_Component) {\n  _inherits(FormCard, _Component);\n\n  function FormCard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, FormCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FormCard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.initFormList = function () {\n      var _this$props = _this.props,\n          formList = _this$props.formList,\n          optionsMap = _this$props.optionsMap,\n          getFieldProps = _this$props.getFieldProps;\n\n      if (formList) {\n        var fieldName = formList.name;\n        var fieldValue = formList.value;\n        var title = formList.title;\n        var fieldId = formList.fieldId;\n        var validators = formList.validators;\n\n        if (formList.type === \"text\") {\n          return /*#__PURE__*/React.createElement(_InputItem, Object.assign({}, getFieldProps(fieldName, {\n            initialValue: fieldValue ? fieldValue : \"\",\n            rules: validators ? [{\n              required: true,\n              message: \"\\u8BF7\\u9009\\u62E9\".concat(title)\n            }] : \"\"\n          }), {\n            placeholder: \"\\u8BF7\\u8F93\\u5165\".concat(title),\n            key: fieldId,\n            editable: formList.available === false ? false : true,\n            clear: true,\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 12\n            }\n          }), /*#__PURE__*/React.createElement(_Badge, {\n            dot: formList.validators ? true : false,\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 26\n            }\n          }, title));\n        } else if (formList.type === \"textarea\") {\n          return /*#__PURE__*/React.createElement(_TextareaItem, Object.assign({}, getFieldProps(fieldName, {\n            initialValue: fieldValue ? fieldValue : \"\",\n            rules: validators ? [{\n              required: true,\n              message: \"\\u8BF7\\u9009\\u62E9\".concat(title)\n            }] : \"\"\n          }), {\n            title: title,\n            placeholder: \"\\u8BF7\\u8F93\\u5165\".concat(title),\n            key: fieldId,\n            editable: formList.available === false ? false : true,\n            clear: true,\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 12\n            }\n          }), /*#__PURE__*/React.createElement(_Badge, {\n            dot: formList.validators ? true : false,\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 6\n            }\n          }, title));\n        } else if (formList.type === \"select\" || formList.type === \"relation\") {\n          var optdata = [];\n\n          if (optionsMap && fieldId) {\n            for (var k in optionsMap) {\n              if (k === fieldId.toString()) {\n                if (optionsMap[k] != null) {\n                  optionsMap[k].forEach(function (it) {\n                    it[\"label\"] = it.title;\n                  });\n                  optdata.push(optionsMap[k]);\n                }\n              }\n            }\n\n            return /*#__PURE__*/React.createElement(SelectPicker, Object.assign({\n              formList: formList,\n              optdata: optdata,\n              disabled: formList.available === false ? true : false,\n              dot: formList.validators === \"required\" ? true : false\n            }, getFieldProps(fieldName, {\n              initialValue: fieldValue ? fieldValue : \"\",\n              rules: validators ? [{\n                required: true,\n                message: \"\\u8BF7\\u9009\\u62E9\".concat(title)\n              }] : \"\"\n            }), {\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 13\n              }\n            }));\n          }\n        } else if (formList.type === \"date\") {\n          var time = \"\";\n          var time_date = \"\";\n\n          if (fieldValue) {\n            //字符串转化为时间格式\n            time = fieldValue.replace(/-/g, \"/\");\n            time_date = new Date(time);\n          }\n\n          return /*#__PURE__*/React.createElement(_DatePicker, Object.assign({\n            extra: \"\\u8BF7\\u9009\\u62E9(\\u53EF\\u9009)\",\n            mode: \"date\",\n            title: \"\\u8BF7\\u9009\\u62E9\".concat(title),\n            key: fieldId\n          }, getFieldProps(fieldName, {\n            initialValue: time_date\n          }), {\n            onOk: function onOk(e) {\n              return console.log('ok', e);\n            },\n            onDismiss: function onDismiss(e) {\n              return console.log('dismiss', e);\n            },\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 12\n            }\n          }), /*#__PURE__*/React.createElement(_List.Item, {\n            arrow: \"horizontal\",\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 29\n            }\n          }, title));\n        } else if (formList.type === \"caselect\") {\n          return /*#__PURE__*/React.createElement(CasePicker, Object.assign({\n            formList: formList\n          }, getFieldProps(fieldName, {\n            initialValue: fieldValue ? fieldValue : \"\"\n          }), {\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 12\n            }\n          }));\n        } else if (formList.type === \"decimal\" || formList.type === \"int\") {\n          return /*#__PURE__*/React.createElement(_InputItem, Object.assign({}, getFieldProps(fieldName, {\n            initialValue: fieldValue ? fieldValue : \"\"\n          }), {\n            type: 'number',\n            defaultValue: fieldValue,\n            placeholder: \"\\u8BF7\\u8F93\\u5165\".concat(title),\n            key: fieldId,\n            clear: true,\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 12\n            }\n          }), title);\n        } else if (formList.type === \"label\") {\n          return /*#__PURE__*/React.createElement(MultiplePicker, Object.assign({\n            formList: formList,\n            optionsMap: optionsMap ? optionsMap : []\n          }, getFieldProps(fieldName, {\n            initialValue: fieldValue ? fieldValue : \"\"\n          }), {\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 12\n            }\n          }));\n        } else if (formList.type === \"file\") {\n          var files = fieldValue ? [{\n            url: fieldValue,\n            id: fieldId\n          }] : [];\n          var imgPick = /*#__PURE__*/React.createElement(ImgBox, Object.assign({\n            files: files\n          }, getFieldProps(fieldName), {\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 21\n            }\n          }));\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 12\n            }\n          }, /*#__PURE__*/React.createElement(_List.Item, {\n            extra: imgPick,\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 29\n            }\n          }, title));\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(FormCard, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"formcard\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 4\n        }\n      }, this.initFormList());\n    }\n  }]);\n\n  return FormCard;\n}(Component);\n\nexport { FormCard as default };","map":{"version":3,"sources":["E:/我的文件/人员定位系统/chq_position_app/src/components/FormCard/index.js"],"names":["React","Component","ImgBox","SelectPicker","CasePicker","MultiplePicker","FormCard","initFormList","props","formList","optionsMap","getFieldProps","fieldName","name","fieldValue","value","title","fieldId","validators","type","initialValue","rules","required","message","available","optdata","k","toString","forEach","it","push","time","time_date","replace","Date","e","console","log","files","url","id","imgPick"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport { DatePicker, List, InputItem, Badge ,TextareaItem} from 'antd-mobile';\r\nimport ImgBox from './../ImgBox'\r\nimport SelectPicker from './../SelectPicker'\r\nimport CasePicker from './../CasePicker'\r\nimport MultiplePicker from './../MultiplePicker'\r\n\r\nexport default class FormCard extends Component {\r\n\r\n\tinitFormList = () => {\r\n        const {formList,optionsMap,getFieldProps} = this.props\r\n\r\n\t\tif(formList) {\r\n\t\t\tconst fieldName = formList.name\r\n\t\t\tconst fieldValue = formList.value\r\n\t\t\tconst title = formList.title\r\n            const fieldId = formList.fieldId\r\n            const validators = formList.validators\r\n\t\t\tif(formList.type === \"text\") {\r\n\t\t\t\treturn <InputItem\r\n                            {...getFieldProps(fieldName,{\r\n                                initialValue:fieldValue?fieldValue:\"\",\r\n                                rules:validators?[{\r\n                                    required: true, message: `请选择${title}`,\r\n                                  }]:\"\",\r\n                            })}\r\n\r\n                            placeholder={`请输入${title}`}\r\n                            key={fieldId}\r\n                            editable={formList.available===false?false:true}\r\n                            clear\r\n                        ><Badge dot={formList.validators?true:false}>{title}</Badge></InputItem>\r\n\t\t\t}else  if(formList.type === \"textarea\") {\r\n\t\t\t\treturn <TextareaItem\r\n\t\t\t\t\t{...getFieldProps(fieldName,{\r\n\t\t\t\t\t\tinitialValue:fieldValue?fieldValue:\"\",\r\n\t\t\t\t\t\trules:validators?[{\r\n\t\t\t\t\t\t\trequired: true, message: `请选择${title}`,\r\n\t\t\t\t\t\t}]:\"\",\r\n\t\t\t\t\t})}\r\n\t\t\t\t\ttitle={title}\r\n\t\t\t\t\tplaceholder={`请输入${title}`}\r\n\t\t\t\t\tkey={fieldId}\r\n\t\t\t\t\teditable={formList.available===false?false:true}\r\n\t\t\t\t\tclear\r\n\t\t\t\t><Badge dot={formList.validators?true:false}>{title}</Badge></TextareaItem>\r\n\t\t\t} else if(formList.type === \"select\" || formList.type === \"relation\") {\r\n\t\t\t\tlet optdata = []\r\n\t\t\t\tif(optionsMap && fieldId) {\r\n                    for(let k in optionsMap) {\r\n                        if(k===fieldId.toString()) {\r\n                        \tif(optionsMap[k]!=null){\r\n                        \t\toptionsMap[k].forEach((it) => {\r\n                                    it[\"label\"] = it.title\r\n                                })\r\n                                optdata.push(optionsMap[k])\r\n                        \t}\r\n                            \r\n                        }\r\n                    }\r\n\t\t\t\t\treturn <SelectPicker \r\n                                formList={formList}\r\n                                optdata={optdata}\r\n                                disabled={formList.available===false?true:false}\r\n                                dot={formList.validators===\"required\"?true:false}\r\n                                {...getFieldProps(fieldName,{\r\n                                    initialValue:fieldValue?fieldValue:\"\",\r\n                                    rules:validators?[{\r\n                                        required: true, message: `请选择${title}`,\r\n                                      }]:\"\",\r\n                                })}\r\n                            />\r\n\t\t\t\t}\r\n\t\t\t} else if(formList.type === \"date\") {\r\n\t\t\t\tlet time = \"\";\r\n\t\t\t\tlet time_date = \"\"\r\n\t\t\t\tif(fieldValue) { //字符串转化为时间格式\r\n\t\t\t\t\ttime = fieldValue.replace(/-/g, \"/\");\r\n\t\t\t\t\ttime_date = new Date(time)\r\n\t\t\t\t}\r\n\t\t\t\treturn <DatePicker   \r\n                            extra=\"请选择(可选)\"\r\n                            mode=\"date\"\r\n                            title={`请选择${title}`}\r\n                            key={fieldId}\r\n                            {...getFieldProps(fieldName,{\r\n                                initialValue:time_date,\r\n                            })}\r\n                            onOk={e => console.log('ok', e)}\r\n                            onDismiss={e => console.log('dismiss', e)}\r\n                        >\r\n                            <List.Item arrow=\"horizontal\">{title}</List.Item>\r\n                        </DatePicker>\r\n\t\t\t} else if(formList.type === \"caselect\") {\r\n\t\t\t\treturn <CasePicker\r\n                            formList={formList}\r\n                            {...getFieldProps(fieldName,{\r\n                                initialValue:fieldValue?fieldValue:\"\",\r\n                            })}\r\n                            />\r\n\t\t\t} else if(formList.type === \"decimal\" || formList.type === \"int\") {\r\n\t\t\t\treturn <InputItem\r\n                            {...getFieldProps(fieldName,{\r\n                                initialValue:fieldValue?fieldValue:\"\",\r\n                            })}\r\n                            type={'number'}\r\n                            defaultValue={fieldValue}\r\n                            placeholder={`请输入${title}`}\r\n                            key={fieldId}\r\n                            clear\r\n                        >{title}</InputItem>\r\n\t\t\t} else if(formList.type === \"label\") {\r\n\t\t\t\treturn <MultiplePicker \r\n                            formList={formList}\r\n                            optionsMap={optionsMap?optionsMap:[]}\r\n                            {...getFieldProps(fieldName,{\r\n                                initialValue:fieldValue?fieldValue:\"\",\r\n                            })}\r\n                        />\r\n\t\t\t} else if(formList.type === \"file\") {\r\n\t\t\t\tconst files = fieldValue ? [{\r\n\t\t\t\t\turl: fieldValue,\r\n\t\t\t\t\tid: fieldId,\r\n\t\t\t\t}] : []\r\n\t\t\t\tconst imgPick = <ImgBox \r\n                                files={files}\r\n                                {...getFieldProps(fieldName)}\r\n                                />\r\n\t\t\t\treturn <div>\r\n                            <List.Item extra={imgPick}>{title}</List.Item>                            \r\n                        </div>\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className=\"formcard\">\r\n                {this.initFormList()}                \r\n            </div>\r\n\t\t)\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}