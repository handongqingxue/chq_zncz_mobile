{"ast":null,"code":"import \"antd-mobile/es/date-picker/style\";\nimport _DatePicker from \"antd-mobile/es/date-picker\";\nimport \"antd-mobile/es/list/style\";\nimport _List from \"antd-mobile/es/list\";\nimport \"antd-mobile/es/textarea-item/style\";\nimport _TextareaItem from \"antd-mobile/es/textarea-item\";\nimport \"antd-mobile/es/input-item/style\";\nimport _InputItem from \"antd-mobile/es/input-item\";\nimport \"antd-mobile/es/badge/style\";\nimport _Badge from \"antd-mobile/es/badge\";\nimport _classCallCheck from \"E:\\\\\\u6211\\u7684\\u6587\\u4EF6\\\\\\u667A\\u80FD\\u79F0\\u91CD\\u7CFB\\u7EDF\\\\\\u624B\\u673A\\u7AEF\\u9879\\u76EE\\\\chq_zncz_mobile\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\\\u6211\\u7684\\u6587\\u4EF6\\\\\\u667A\\u80FD\\u79F0\\u91CD\\u7CFB\\u7EDF\\\\\\u624B\\u673A\\u7AEF\\u9879\\u76EE\\\\chq_zncz_mobile\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\\\u6211\\u7684\\u6587\\u4EF6\\\\\\u667A\\u80FD\\u79F0\\u91CD\\u7CFB\\u7EDF\\\\\\u624B\\u673A\\u7AEF\\u9879\\u76EE\\\\chq_zncz_mobile\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\\\u6211\\u7684\\u6587\\u4EF6\\\\\\u667A\\u80FD\\u79F0\\u91CD\\u7CFB\\u7EDF\\\\\\u624B\\u673A\\u7AEF\\u9879\\u76EE\\\\chq_zncz_mobile\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\\\u6211\\u7684\\u6587\\u4EF6\\\\\\u667A\\u80FD\\u79F0\\u91CD\\u7CFB\\u7EDF\\\\\\u624B\\u673A\\u7AEF\\u9879\\u76EE\\\\chq_zncz_mobile\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"E:\\\\\\u6211\\u7684\\u6587\\u4EF6\\\\\\u667A\\u80FD\\u79F0\\u91CD\\u7CFB\\u7EDF\\\\\\u624B\\u673A\\u7AEF\\u9879\\u76EE\\\\chq_zncz_mobile\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"E:\\\\\\u6211\\u7684\\u6587\\u4EF6\\\\\\u667A\\u80FD\\u79F0\\u91CD\\u7CFB\\u7EDF\\\\\\u624B\\u673A\\u7AEF\\u9879\\u76EE\\\\chq_zncz_mobile\\\\src\\\\components\\\\FormCard\\\\editList.js\";\nimport React, { Component } from 'react';\nimport ImgBox from './../ImgBox';\nimport SelectPicker from './../SelectPicker';\nimport CasePicker from './../CasePicker';\nimport MultiplePicker from './../MultiplePicker';\n\nvar EditList = /*#__PURE__*/function (_Component) {\n  _inherits(EditList, _Component);\n\n  function EditList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.initFormList = function () {\n      var _this$props = _this.props,\n          formList = _this$props.formList,\n          optionsMap = _this$props.optionsMap,\n          getFieldProps = _this$props.getFieldProps,\n          isDrawer = _this$props.isDrawer,\n          rabcTemplateupdatable = _this$props.rabcTemplateupdatable;\n      var formItemList = [];\n\n      if (formList.list && formList.list.length > 0) {\n        formList.list.forEach(function (item, index) {\n          var title = item.title;\n          var key = item.code + index;\n          var fieldValue = item.value;\n          var available = item.fieldAvailable;\n          var fieldName = item.name;\n          var validators = item.validators;\n          var fieldId = item.fieldId;\n          var type = item.type;\n\n          if (type === \"text\") {\n            var TEXT = /*#__PURE__*/React.createElement(_InputItem, Object.assign({}, getFieldProps(fieldName, {\n              initialValue: fieldValue ? fieldValue : \"\",\n              rules: validators ? [{\n                required: true,\n                message: \"\\u8BF7\\u9009\\u62E9\".concat(title)\n              }] : \"\"\n            }), {\n              placeholder: \"\\u8BF7\\u8F93\\u5165\".concat(title),\n              key: key,\n              editable: available === false ? false : true,\n              clear: true,\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 24,\n                columnNumber: 33\n              }\n            }), /*#__PURE__*/React.createElement(_Badge, {\n              dot: validators ? true : false,\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 35,\n                columnNumber: 22\n              }\n            }, title));\n            formItemList.push(TEXT);\n          } else if (type === \"textarea\") {\n            var TEXTAREA = /*#__PURE__*/React.createElement(_TextareaItem, Object.assign({}, getFieldProps(fieldName, {\n              initialValue: fieldValue ? fieldValue : \"\",\n              rules: validators ? [{\n                required: true,\n                message: \"\\u8BF7\\u9009\\u62E9\".concat(title)\n              }] : \"\"\n            }), {\n              title: title,\n              placeholder: \"\\u8BF7\\u8F93\\u5165\".concat(title),\n              key: key,\n              editable: available === false ? false : true,\n              clear: true,\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 37\n              }\n            }), /*#__PURE__*/React.createElement(_Badge, {\n              dot: validators ? true : false,\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 22\n              }\n            }, title));\n            formItemList.push(TEXTAREA);\n          } else if (type === \"decimal\" || type === \"int\") {\n            var decimal = /*#__PURE__*/React.createElement(_InputItem, Object.assign({}, getFieldProps(fieldName, {\n              initialValue: fieldValue ? fieldValue : \"\"\n            }), {\n              type: 'number',\n              defaultValue: fieldValue,\n              placeholder: \"\\u8BF7\\u8F93\\u5165\".concat(title),\n              key: fieldId,\n              clear: true,\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 36\n              }\n            }), title);\n            formItemList.push(decimal);\n          } else if (type === \"file\") {\n            var files = fieldValue ? [{\n              url: fieldValue,\n              id: fieldId\n            }] : [];\n            var imgPick = /*#__PURE__*/React.createElement(ImgBox, Object.assign({\n              files: files\n            }, getFieldProps(fieldName), {\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 37\n              }\n            }));\n            var File = /*#__PURE__*/React.createElement(\"div\", {\n              key: key,\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(_List.Item, {\n              extra: imgPick,\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 25\n              }\n            }, title));\n            formItemList.push(File);\n          } else if (type === \"select\") {\n            var optdata = [];\n            var dot = false; //必选标记\n\n            if (optionsMap && fieldId) {\n              for (var k in optionsMap) {\n                if (k === fieldId.toString()) {\n                  optdata.push(optionsMap[k]);\n                }\n              }\n\n              var select = /*#__PURE__*/React.createElement(SelectPicker, Object.assign({\n                formList: item,\n                optdata: optdata,\n                key: key,\n                disabled: available === false ? true : false,\n                dot: dot\n              }, getFieldProps(fieldName, {\n                initialValue: fieldValue ? fieldValue : \"\",\n                rules: validators ? [{\n                  required: true,\n                  message: \"\\u8BF7\\u9009\\u62E9\".concat(title)\n                }] : \"\"\n              }), {\n                __self: _assertThisInitialized(_assertThisInitialized(_this)),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 38\n                }\n              }));\n              formItemList.push(select);\n            }\n          } else if (type === \"relation\") {\n            var _optdata = [];\n            var _dot = false; //必选标记\n\n            _optdata.push(item.relationSubdomain);\n\n            if (item.validators === \"required\") {\n              _dot = true;\n            }\n\n            var list = {\n              fieldId: item.fieldId,\n              name: item.name,\n              title: item.title,\n              type: item.type,\n              validators: item.validators,\n              value: item.value\n            };\n            var relation = /*#__PURE__*/React.createElement(SelectPicker, Object.assign({\n              formList: list,\n              optdata: _optdata,\n              key: key,\n              disabled: available === false ? true : false,\n              dot: _dot\n            }, getFieldProps(fieldName, {\n              initialValue: fieldValue ? fieldValue : \"\",\n              rules: validators ? [{\n                required: true,\n                message: \"\\u8BF7\\u9009\\u62E9\".concat(title)\n              }] : \"\"\n            }), {\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 36\n              }\n            }));\n            formItemList.push(relation);\n          } else if (type === \"caselect\") {\n            var casePicker = /*#__PURE__*/React.createElement(CasePicker, Object.assign({\n              formList: item\n            }, getFieldProps(fieldName, {\n              initialValue: fieldValue ? fieldValue : \"\"\n            }), {\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 39\n              }\n            }));\n            formItemList.push(casePicker);\n          } else if (type === \"label\") {\n            var multi = /*#__PURE__*/React.createElement(MultiplePicker, Object.assign({\n              formList: item,\n              optionsMap: optionsMap ? optionsMap : []\n            }, getFieldProps(fieldName, {\n              initialValue: fieldValue ? fieldValue : \"\"\n            }), {\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 34\n              }\n            }));\n            formItemList.push(multi);\n          } else if (type === \"date\") {\n            var time = \"\";\n            var time_date = \"\";\n\n            if (fieldValue) {\n              //字符串转化为时间格式\n              time = fieldValue.replace(/-/g, \"/\");\n              time_date = new Date(time);\n            }\n\n            var date = /*#__PURE__*/React.createElement(_DatePicker, Object.assign({\n              extra: \"\\u8BF7\\u9009\\u62E9(\\u53EF\\u9009)\",\n              mode: \"date\",\n              title: \"\\u8BF7\\u9009\\u62E9\".concat(title),\n              key: fieldId\n            }, getFieldProps(fieldName, {\n              initialValue: time_date\n            }), {\n              onOk: function onOk(e) {\n                return console.log('ok', e);\n              },\n              onDismiss: function onDismiss(e) {\n                return console.log('dismiss', e);\n              },\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 33\n              }\n            }), /*#__PURE__*/React.createElement(_List.Item, {\n              arrow: \"horizontal\",\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 25\n              }\n            }, title));\n            formItemList.push(date);\n          } else if (type === \"deletebtn\") {\n            var deletebtn = /*#__PURE__*/React.createElement(\"p\", {\n              className: \"deteleLine\",\n              key: key,\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 37\n              }\n            }, !isDrawer && rabcTemplateupdatable ? /*#__PURE__*/React.createElement(\"span\", {\n              className: \"iconfont\",\n              style: {\n                float: \"left\",\n                top: \"5px\",\n                left: '10px'\n              },\n              onClick: _this.props.editTemplate,\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 61\n              }\n            }, \"\\uE8AE\") : null, /*#__PURE__*/React.createElement(\"span\", {\n              className: \"iconfont\",\n              style: {\n                float: \"right\",\n                top: \"0\"\n              },\n              onClick: _this.props.deleteList,\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 25\n              }\n            }, \"\\uE676\"));\n            formItemList.unshift(deletebtn);\n          }\n        });\n      }\n\n      return formItemList;\n    };\n\n    return _this;\n  }\n\n  _createClass(EditList, [{\n    key: \"render\",\n    value: function render() {\n      return this.initFormList();\n    }\n  }]);\n\n  return EditList;\n}(Component);\n\nexport { EditList as default };","map":{"version":3,"sources":["E:/我的文件/智能称重系统/手机端项目/chq_zncz_mobile/src/components/FormCard/editList.js"],"names":["React","Component","ImgBox","SelectPicker","CasePicker","MultiplePicker","EditList","initFormList","props","formList","optionsMap","getFieldProps","isDrawer","rabcTemplateupdatable","formItemList","list","length","forEach","item","index","title","key","code","fieldValue","value","available","fieldAvailable","fieldName","name","validators","fieldId","type","TEXT","initialValue","rules","required","message","push","TEXTAREA","decimal","files","url","id","imgPick","File","optdata","dot","k","toString","select","relationSubdomain","relation","casePicker","multi","time","time_date","replace","Date","date","e","console","log","deletebtn","float","top","left","editTemplate","deleteList","unshift"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport { DatePicker, List, InputItem, Badge,TextareaItem } from 'antd-mobile';\r\nimport ImgBox from './../ImgBox'\r\nimport SelectPicker from './../SelectPicker'\r\nimport CasePicker from './../CasePicker'\r\nimport MultiplePicker from './../MultiplePicker'\r\n\r\nexport default class EditList extends Component {\r\n\r\n    initFormList = () => {\r\n        const {formList,optionsMap,getFieldProps,isDrawer,rabcTemplateupdatable} = this.props\r\n        const formItemList=[]; \r\n        if(formList.list && formList.list.length>0){\r\n            formList.list.forEach((item,index)=>{\r\n                const title=item.title\r\n                const key=item.code+index\r\n                const fieldValue=item.value\r\n                const available=item.fieldAvailable\r\n                const fieldName=item.name\r\n                const validators=item.validators\r\n                const fieldId=item.fieldId\r\n                const type=item.type;\r\n                if(type === \"text\") {\r\n                    const TEXT= <InputItem\r\n                        {...getFieldProps(fieldName,{\r\n                            initialValue:fieldValue?fieldValue:\"\",\r\n                            rules:validators?[{\r\n                                required: true, message: `请选择${title}`,\r\n                                }]:\"\",\r\n                        })}\r\n                        placeholder={`请输入${title}`}\r\n                        key={key}\r\n                        editable={available===false?false:true}\r\n                        clear\r\n                    ><Badge dot={validators?true:false}>{title}</Badge></InputItem>\r\n                    formItemList.push(TEXT)        \r\n                }else  if(type === \"textarea\") {\r\n                    const TEXTAREA= <TextareaItem\r\n                        {...getFieldProps(fieldName,{\r\n                            initialValue:fieldValue?fieldValue:\"\",\r\n                            rules:validators?[{\r\n                                required: true, message: `请选择${title}`,\r\n                            }]:\"\",\r\n                        })}\r\n                        title={title}\r\n                        placeholder={`请输入${title}`}\r\n                        key={key}\r\n                        editable={available===false?false:true}\r\n                        clear\r\n                    ><Badge dot={validators?true:false}>{title}</Badge></TextareaItem>\r\n                    formItemList.push(TEXTAREA)\r\n                }\r\n                else if(type === \"decimal\" || type === \"int\") {\r\n                    const decimal= <InputItem\r\n                        {...getFieldProps(fieldName,{\r\n                            initialValue:fieldValue?fieldValue:\"\",\r\n                        })}\r\n                        type={'number'}\r\n                        defaultValue={fieldValue}\r\n                        placeholder={`请输入${title}`}\r\n                        key={fieldId}\r\n                        clear\r\n                    >{title}</InputItem>\r\n                    formItemList.push(decimal)\r\n                }else if(type === \"file\") {\r\n                    const files = fieldValue ? [{\r\n                        url: fieldValue,\r\n                        id: fieldId,\r\n                    }] : []\r\n                    const imgPick = <ImgBox \r\n                        files={files}\r\n                        {...getFieldProps(fieldName)}\r\n                        />\r\n                    const File= <div key={key}>\r\n                        <List.Item extra={imgPick}>{title}</List.Item>                            \r\n                    </div>\r\n                    formItemList.push(File)\r\n                } else if(type === \"select\") {\r\n                    let optdata = []\r\n                    let dot=false//必选标记\r\n                    if(optionsMap && fieldId) {\r\n                        for(let k in optionsMap) {\r\n                            if(k===fieldId.toString()) {\r\n                               optdata.push(optionsMap[k])\r\n                            }\r\n                        }\r\n                        const select=<SelectPicker \r\n                            formList={item}\r\n                            optdata={optdata}\r\n                            key={key}\r\n                            disabled={available===false?true:false}\r\n                            dot={dot}\r\n                            {...getFieldProps(fieldName,{\r\n                                initialValue:fieldValue?fieldValue:\"\",\r\n                                rules:validators?[{\r\n                                    required: true, message: `请选择${title}`,\r\n                                }]:\"\",\r\n                            })}\r\n                        />\r\n                        formItemList.push(select)\r\n                    }\r\n                }else if(type === \"relation\") {\r\n                    let optdata = []\r\n                    let dot=false//必选标记\r\n                    optdata.push(item.relationSubdomain)\r\n                    if(item.validators===\"required\"){\r\n                        dot=true\r\n                    }\r\n                    const list={\r\n                        fieldId:item.fieldId,\r\n                        name:item.name,\r\n                        title:item.title,\r\n                        type:item.type,\r\n                        validators:item.validators,\r\n                        value:item.value\r\n                    }\r\n                    const relation=<SelectPicker \r\n                        formList={list}\r\n                        optdata={optdata}\r\n                        key={key}\r\n                        disabled={available===false?true:false}\r\n                        dot={dot}\r\n                        {...getFieldProps(fieldName,{\r\n                            initialValue:fieldValue?fieldValue:\"\",\r\n                            rules:validators?[{\r\n                                required: true, message: `请选择${title}`,\r\n                            }]:\"\",\r\n                        })}\r\n                    />\r\n                    formItemList.push(relation)\r\n                }else if(type === \"caselect\") {\r\n                    const casePicker= <CasePicker\r\n                        formList={item}\r\n                        {...getFieldProps(fieldName,{\r\n                            initialValue:fieldValue?fieldValue:\"\",\r\n                        })}\r\n                    />\r\n                    formItemList.push(casePicker)\r\n                }else if(type === \"label\") {\r\n                    const  multi=<MultiplePicker \r\n                        formList={item}\r\n                        optionsMap={optionsMap?optionsMap:[]}\r\n                        {...getFieldProps(fieldName,{\r\n                            initialValue:fieldValue?fieldValue:\"\",\r\n                        })}\r\n                    />\r\n                    formItemList.push(multi)\r\n                }else if(type === \"date\") {\r\n                    let time = \"\";\r\n                    let time_date = \"\"\r\n                    if(fieldValue) { //字符串转化为时间格式\r\n                        time = fieldValue.replace(/-/g, \"/\");\r\n                        time_date = new Date(time)\r\n                    }\r\n                    const date= <DatePicker   \r\n                        extra=\"请选择(可选)\"\r\n                        mode=\"date\"\r\n                        title={`请选择${title}`}\r\n                        key={fieldId}\r\n                        {...getFieldProps(fieldName,{\r\n                            initialValue:time_date,\r\n                        })}\r\n                        onOk={e => console.log('ok', e)}\r\n                        onDismiss={e => console.log('dismiss', e)}\r\n                    >\r\n                        <List.Item arrow=\"horizontal\">{title}</List.Item>\r\n                    </DatePicker>\r\n                    formItemList.push(date)\r\n                }else if(type === \"deletebtn\") {\r\n                    const deletebtn=<p className=\"deteleLine\" key={key}>\r\n                        {!isDrawer && rabcTemplateupdatable?<span \r\n                            className=\"iconfont\" \r\n                            style={{float:\"left\",top:\"5px\",left:'10px'}}\r\n                            onClick={this.props.editTemplate}\r\n                            >&#xe8ae;</span>:null}\r\n                        <span \r\n                            className=\"iconfont\" \r\n                            style={{float:\"right\",top:\"0\"}}\r\n                            onClick={this.props.deleteList}\r\n                            >&#xe676;</span>\r\n                    </p>\r\n                    formItemList.unshift(deletebtn)\r\n                }\r\n            })\r\n        }\r\n        return formItemList;\r\n    }\r\n    render(){\r\n        return (\r\n            this.initFormList()\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}